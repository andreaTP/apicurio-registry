/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.3.1-SNAPSHOT
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigurationProperty;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.LogConfiguration;
import org.openapitools.client.model.NamedLogConfiguration;
import org.openapitools.client.model.RoleMapping;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.RuleType;
import org.openapitools.client.model.UpdateConfigurationProperty;
import org.openapitools.client.model.UpdateRole;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGlobalRule
     * @param rule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalRuleCall(Rule rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule;

        // create path and map variables
        String localVarPath = "/admin/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGlobalRuleValidateBeforeCall(Rule rule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling createGlobalRule(Async)");
        }
        

        okhttp3.Call localVarCall = createGlobalRuleCall(rule, _callback);
        return localVarCall;

    }

    /**
     * Create global rule
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error &#x60;400&#x60;) * The rule already exists (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void createGlobalRule(Rule rule) throws ApiException {
        createGlobalRuleWithHttpInfo(rule);
    }

    /**
     * Create global rule
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error &#x60;400&#x60;) * The rule already exists (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createGlobalRuleWithHttpInfo(Rule rule) throws ApiException {
        okhttp3.Call localVarCall = createGlobalRuleValidateBeforeCall(rule, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create global rule (asynchronously)
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error &#x60;400&#x60;) * The rule already exists (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalRuleAsync(Rule rule, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGlobalRuleValidateBeforeCall(rule, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRoleMapping
     * @param roleMapping  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the role mapping was successfully created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleMappingCall(RoleMapping roleMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleMapping;

        // create path and map variables
        String localVarPath = "/admin/roleMappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleMappingValidateBeforeCall(RoleMapping roleMapping, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleMapping' is set
        if (roleMapping == null) {
            throw new ApiException("Missing the required parameter 'roleMapping' when calling createRoleMapping(Async)");
        }
        

        okhttp3.Call localVarCall = createRoleMappingCall(roleMapping, _callback);
        return localVarCall;

    }

    /**
     * Create a new role mapping
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;)  
     * @param roleMapping  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the role mapping was successfully created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void createRoleMapping(RoleMapping roleMapping) throws ApiException {
        createRoleMappingWithHttpInfo(roleMapping);
    }

    /**
     * Create a new role mapping
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;)  
     * @param roleMapping  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the role mapping was successfully created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createRoleMappingWithHttpInfo(RoleMapping roleMapping) throws ApiException {
        okhttp3.Call localVarCall = createRoleMappingValidateBeforeCall(roleMapping, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new role mapping (asynchronously)
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;)  
     * @param roleMapping  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the role mapping was successfully created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleMappingAsync(RoleMapping roleMapping, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleMappingValidateBeforeCall(roleMapping, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAllGlobalRules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All global rules have been removed successfully. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllGlobalRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllGlobalRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deleteAllGlobalRulesCall(_callback);
        return localVarCall;

    }

    /**
     * Delete all global rules
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All global rules have been removed successfully. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAllGlobalRules() throws ApiException {
        deleteAllGlobalRulesWithHttpInfo();
    }

    /**
     * Delete all global rules
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All global rules have been removed successfully. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAllGlobalRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAllGlobalRulesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all global rules (asynchronously)
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All global rules have been removed successfully. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllGlobalRulesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllGlobalRulesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGlobalRule
     * @param rule The unique name/type of a rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlobalRuleCall(RuleType rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/rules/{rule}"
            .replaceAll("\\{" + "rule" + "\\}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGlobalRuleValidateBeforeCall(RuleType rule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling deleteGlobalRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteGlobalRuleCall(rule, _callback);
        return localVarCall;

    }

    /**
     * Delete global rule
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * Rule cannot be deleted (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGlobalRule(RuleType rule) throws ApiException {
        deleteGlobalRuleWithHttpInfo(rule);
    }

    /**
     * Delete global rule
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * Rule cannot be deleted (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGlobalRuleWithHttpInfo(RuleType rule) throws ApiException {
        okhttp3.Call localVarCall = deleteGlobalRuleValidateBeforeCall(rule, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete global rule (asynchronously)
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * Rule cannot be deleted (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The global rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlobalRuleAsync(RuleType rule, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGlobalRuleValidateBeforeCall(rule, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoleMapping
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response returned when the delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleMappingCall(String principalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/roleMappings/{principalId}"
            .replaceAll("\\{" + "principalId" + "\\}", localVarApiClient.escapeString(principalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleMappingValidateBeforeCall(String principalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principalId' is set
        if (principalId == null) {
            throw new ApiException("Missing the required parameter 'principalId' when calling deleteRoleMapping(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRoleMappingCall(principalId, _callback);
        return localVarCall;

    }

    /**
     * Delete a role mapping
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response returned when the delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRoleMapping(String principalId) throws ApiException {
        deleteRoleMappingWithHttpInfo(principalId);
    }

    /**
     * Delete a role mapping
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response returned when the delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleMappingWithHttpInfo(String principalId) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleMappingValidateBeforeCall(principalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a role mapping (asynchronously)
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response returned when the delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleMappingAsync(String principalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleMappingValidateBeforeCall(principalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportData
     * @param forBrowser Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the export is successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDataCall(Boolean forBrowser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forBrowser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forBrowser", forBrowser));
        }

        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDataValidateBeforeCall(Boolean forBrowser, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = exportDataCall(forBrowser, _callback);
        return localVarCall;

    }

    /**
     * Export registry data
     * Exports registry data as a ZIP archive.
     * @param forBrowser Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the export is successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public File exportData(Boolean forBrowser) throws ApiException {
        ApiResponse<File> localVarResp = exportDataWithHttpInfo(forBrowser);
        return localVarResp.getData();
    }

    /**
     * Export registry data
     * Exports registry data as a ZIP archive.
     * @param forBrowser Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the export is successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportDataWithHttpInfo(Boolean forBrowser) throws ApiException {
        okhttp3.Call localVarCall = exportDataValidateBeforeCall(forBrowser, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export registry data (asynchronously)
     * Exports registry data as a ZIP archive.
     * @param forBrowser Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the export is successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDataAsync(Boolean forBrowser, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDataValidateBeforeCall(forBrowser, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigProperty
     * @param propertyName The name of a configuration property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The configuration property value. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigPropertyCall(String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/config/properties/{propertyName}"
            .replaceAll("\\{" + "propertyName" + "\\}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigPropertyValidateBeforeCall(String propertyName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getConfigProperty(Async)");
        }
        

        okhttp3.Call localVarCall = getConfigPropertyCall(propertyName, _callback);
        return localVarCall;

    }

    /**
     * Get configuration property value
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @return ConfigurationProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The configuration property value. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationProperty getConfigProperty(String propertyName) throws ApiException {
        ApiResponse<ConfigurationProperty> localVarResp = getConfigPropertyWithHttpInfo(propertyName);
        return localVarResp.getData();
    }

    /**
     * Get configuration property value
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @return ApiResponse&lt;ConfigurationProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The configuration property value. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationProperty> getConfigPropertyWithHttpInfo(String propertyName) throws ApiException {
        okhttp3.Call localVarCall = getConfigPropertyValidateBeforeCall(propertyName, null);
        Type localVarReturnType = new TypeToken<ConfigurationProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get configuration property value (asynchronously)
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The configuration property value. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigPropertyAsync(String propertyName, final ApiCallback<ConfigurationProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigPropertyValidateBeforeCall(propertyName, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlobalRuleConfig
     * @param rule The unique name/type of a rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalRuleConfigCall(RuleType rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/rules/{rule}"
            .replaceAll("\\{" + "rule" + "\\}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalRuleConfigValidateBeforeCall(RuleType rule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling getGlobalRuleConfig(Async)");
        }
        

        okhttp3.Call localVarCall = getGlobalRuleConfigCall(rule, _callback);
        return localVarCall;

    }

    /**
     * Get global rule configuration
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public Rule getGlobalRuleConfig(RuleType rule) throws ApiException {
        ApiResponse<Rule> localVarResp = getGlobalRuleConfigWithHttpInfo(rule);
        return localVarResp.getData();
    }

    /**
     * Get global rule configuration
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> getGlobalRuleConfigWithHttpInfo(RuleType rule) throws ApiException {
        okhttp3.Call localVarCall = getGlobalRuleConfigValidateBeforeCall(rule, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global rule configuration (asynchronously)
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalRuleConfigAsync(RuleType rule, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalRuleConfigValidateBeforeCall(rule, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLogConfiguration
     * @param logger The name of a single logger. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The logger configuration for the named logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogConfigurationCall(String logger, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/loggers/{logger}"
            .replaceAll("\\{" + "logger" + "\\}", localVarApiClient.escapeString(logger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogConfigurationValidateBeforeCall(String logger, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'logger' is set
        if (logger == null) {
            throw new ApiException("Missing the required parameter 'logger' when calling getLogConfiguration(Async)");
        }
        

        okhttp3.Call localVarCall = getLogConfigurationCall(logger, _callback);
        return localVarCall;

    }

    /**
     * Get a single logger configuration
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @param logger The name of a single logger. (required)
     * @return NamedLogConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The logger configuration for the named logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public NamedLogConfiguration getLogConfiguration(String logger) throws ApiException {
        ApiResponse<NamedLogConfiguration> localVarResp = getLogConfigurationWithHttpInfo(logger);
        return localVarResp.getData();
    }

    /**
     * Get a single logger configuration
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @param logger The name of a single logger. (required)
     * @return ApiResponse&lt;NamedLogConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The logger configuration for the named logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamedLogConfiguration> getLogConfigurationWithHttpInfo(String logger) throws ApiException {
        okhttp3.Call localVarCall = getLogConfigurationValidateBeforeCall(logger, null);
        Type localVarReturnType = new TypeToken<NamedLogConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single logger configuration (asynchronously)
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @param logger The name of a single logger. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The logger configuration for the named logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogConfigurationAsync(String logger, final ApiCallback<NamedLogConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogConfigurationValidateBeforeCall(logger, _callback);
        Type localVarReturnType = new TypeToken<NamedLogConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleMapping
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When successful, returns the details of a role mapping. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleMappingCall(String principalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/roleMappings/{principalId}"
            .replaceAll("\\{" + "principalId" + "\\}", localVarApiClient.escapeString(principalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleMappingValidateBeforeCall(String principalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principalId' is set
        if (principalId == null) {
            throw new ApiException("Missing the required parameter 'principalId' when calling getRoleMapping(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleMappingCall(principalId, _callback);
        return localVarCall;

    }

    /**
     * Return a single role mapping
     * Gets the details of a single role mapping (by &#x60;principalId&#x60;).  This operation can fail for the following reasons:  * No role mapping for the &#x60;principalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @return RoleMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When successful, returns the details of a role mapping. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public RoleMapping getRoleMapping(String principalId) throws ApiException {
        ApiResponse<RoleMapping> localVarResp = getRoleMappingWithHttpInfo(principalId);
        return localVarResp.getData();
    }

    /**
     * Return a single role mapping
     * Gets the details of a single role mapping (by &#x60;principalId&#x60;).  This operation can fail for the following reasons:  * No role mapping for the &#x60;principalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @return ApiResponse&lt;RoleMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When successful, returns the details of a role mapping. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleMapping> getRoleMappingWithHttpInfo(String principalId) throws ApiException {
        okhttp3.Call localVarCall = getRoleMappingValidateBeforeCall(principalId, null);
        Type localVarReturnType = new TypeToken<RoleMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a single role mapping (asynchronously)
     * Gets the details of a single role mapping (by &#x60;principalId&#x60;).  This operation can fail for the following reasons:  * No role mapping for the &#x60;principalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When successful, returns the details of a role mapping. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleMappingAsync(String principalId, final ApiCallback<RoleMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleMappingValidateBeforeCall(principalId, _callback);
        Type localVarReturnType = new TypeToken<RoleMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importData
     * @param body The ZIP file representing the previously exported registry data. (required)
     * @param xRegistryPreserveGlobalId If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict. (optional)
     * @param xRegistryPreserveContentId If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Indicates that the import was successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importDataCall(File body, Boolean xRegistryPreserveGlobalId, Boolean xRegistryPreserveContentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRegistryPreserveGlobalId != null) {
            localVarHeaderParams.put("X-Registry-Preserve-GlobalId", localVarApiClient.parameterToString(xRegistryPreserveGlobalId));
        }

        if (xRegistryPreserveContentId != null) {
            localVarHeaderParams.put("X-Registry-Preserve-ContentId", localVarApiClient.parameterToString(xRegistryPreserveContentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/zip"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importDataValidateBeforeCall(File body, Boolean xRegistryPreserveGlobalId, Boolean xRegistryPreserveContentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importData(Async)");
        }
        

        okhttp3.Call localVarCall = importDataCall(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, _callback);
        return localVarCall;

    }

    /**
     * Import registry data
     * Imports registry data that was previously exported using the &#x60;/admin/export&#x60; operation.
     * @param body The ZIP file representing the previously exported registry data. (required)
     * @param xRegistryPreserveGlobalId If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict. (optional)
     * @param xRegistryPreserveContentId If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Indicates that the import was successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void importData(File body, Boolean xRegistryPreserveGlobalId, Boolean xRegistryPreserveContentId) throws ApiException {
        importDataWithHttpInfo(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId);
    }

    /**
     * Import registry data
     * Imports registry data that was previously exported using the &#x60;/admin/export&#x60; operation.
     * @param body The ZIP file representing the previously exported registry data. (required)
     * @param xRegistryPreserveGlobalId If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict. (optional)
     * @param xRegistryPreserveContentId If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Indicates that the import was successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importDataWithHttpInfo(File body, Boolean xRegistryPreserveGlobalId, Boolean xRegistryPreserveContentId) throws ApiException {
        okhttp3.Call localVarCall = importDataValidateBeforeCall(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import registry data (asynchronously)
     * Imports registry data that was previously exported using the &#x60;/admin/export&#x60; operation.
     * @param body The ZIP file representing the previously exported registry data. (required)
     * @param xRegistryPreserveGlobalId If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict. (optional)
     * @param xRegistryPreserveContentId If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Indicates that the import was successful. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importDataAsync(File body, Boolean xRegistryPreserveGlobalId, Boolean xRegistryPreserveContentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importDataValidateBeforeCall(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConfigProperties
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a list of configuration properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConfigPropertiesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/config/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConfigPropertiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listConfigPropertiesCall(_callback);
        return localVarCall;

    }

    /**
     * List all configuration properties
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @return List&lt;ConfigurationProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a list of configuration properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<ConfigurationProperty> listConfigProperties() throws ApiException {
        ApiResponse<List<ConfigurationProperty>> localVarResp = listConfigPropertiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all configuration properties
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @return ApiResponse&lt;List&lt;ConfigurationProperty&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a list of configuration properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConfigurationProperty>> listConfigPropertiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listConfigPropertiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ConfigurationProperty>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all configuration properties (asynchronously)
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a list of configuration properties. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConfigPropertiesAsync(final ApiCallback<List<ConfigurationProperty>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConfigPropertiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ConfigurationProperty>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGlobalRules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of names of the globally configured rules. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGlobalRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGlobalRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listGlobalRulesCall(_callback);
        return localVarCall;

    }

    /**
     * List global rules
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @return List&lt;RuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of names of the globally configured rules. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleType> listGlobalRules() throws ApiException {
        ApiResponse<List<RuleType>> localVarResp = listGlobalRulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List global rules
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @return ApiResponse&lt;List&lt;RuleType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of names of the globally configured rules. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleType>> listGlobalRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listGlobalRulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RuleType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List global rules (asynchronously)
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of names of the globally configured rules. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGlobalRulesAsync(final ApiCallback<List<RuleType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGlobalRulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RuleType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLogConfigurations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of logging configurations. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLogConfigurationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/loggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLogConfigurationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listLogConfigurationsCall(_callback);
        return localVarCall;

    }

    /**
     * List logging configurations
     * List all of the configured logging levels.  These override the default logging configuration.
     * @return List&lt;NamedLogConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of logging configurations. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<NamedLogConfiguration> listLogConfigurations() throws ApiException {
        ApiResponse<List<NamedLogConfiguration>> localVarResp = listLogConfigurationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List logging configurations
     * List all of the configured logging levels.  These override the default logging configuration.
     * @return ApiResponse&lt;List&lt;NamedLogConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of logging configurations. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NamedLogConfiguration>> listLogConfigurationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLogConfigurationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<NamedLogConfiguration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List logging configurations (asynchronously)
     * List all of the configured logging levels.  These override the default logging configuration.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of logging configurations. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLogConfigurationsAsync(final ApiCallback<List<NamedLogConfiguration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLogConfigurationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<NamedLogConfiguration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoleMappings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response will return the list of role mappings. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoleMappingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/roleMappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoleMappingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRoleMappingsCall(_callback);
        return localVarCall;

    }

    /**
     * List all role mappings
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @return List&lt;RoleMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response will return the list of role mappings. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleMapping> listRoleMappings() throws ApiException {
        ApiResponse<List<RoleMapping>> localVarResp = listRoleMappingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all role mappings
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @return ApiResponse&lt;List&lt;RoleMapping&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response will return the list of role mappings. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleMapping>> listRoleMappingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRoleMappingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RoleMapping>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all role mappings (asynchronously)
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response will return the list of role mappings. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoleMappingsAsync(final ApiCallback<List<RoleMapping>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoleMappingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RoleMapping>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeLogConfiguration
     * @param logger The name of a single logger. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default logger configuration (now that the configuration for this logger has been removed, the  default configuration is applied). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLogConfigurationCall(String logger, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/loggers/{logger}"
            .replaceAll("\\{" + "logger" + "\\}", localVarApiClient.escapeString(logger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLogConfigurationValidateBeforeCall(String logger, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'logger' is set
        if (logger == null) {
            throw new ApiException("Missing the required parameter 'logger' when calling removeLogConfiguration(Async)");
        }
        

        okhttp3.Call localVarCall = removeLogConfigurationCall(logger, _callback);
        return localVarCall;

    }

    /**
     * Removes logger configuration
     * Removes the configured logger configuration (if any) for the given logger.
     * @param logger The name of a single logger. (required)
     * @return NamedLogConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default logger configuration (now that the configuration for this logger has been removed, the  default configuration is applied). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public NamedLogConfiguration removeLogConfiguration(String logger) throws ApiException {
        ApiResponse<NamedLogConfiguration> localVarResp = removeLogConfigurationWithHttpInfo(logger);
        return localVarResp.getData();
    }

    /**
     * Removes logger configuration
     * Removes the configured logger configuration (if any) for the given logger.
     * @param logger The name of a single logger. (required)
     * @return ApiResponse&lt;NamedLogConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default logger configuration (now that the configuration for this logger has been removed, the  default configuration is applied). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamedLogConfiguration> removeLogConfigurationWithHttpInfo(String logger) throws ApiException {
        okhttp3.Call localVarCall = removeLogConfigurationValidateBeforeCall(logger, null);
        Type localVarReturnType = new TypeToken<NamedLogConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes logger configuration (asynchronously)
     * Removes the configured logger configuration (if any) for the given logger.
     * @param logger The name of a single logger. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The default logger configuration (now that the configuration for this logger has been removed, the  default configuration is applied). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLogConfigurationAsync(String logger, final ApiCallback<NamedLogConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLogConfigurationValidateBeforeCall(logger, _callback);
        Type localVarReturnType = new TypeToken<NamedLogConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetConfigProperty
     * @param propertyName The name of a configuration property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetConfigPropertyCall(String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/config/properties/{propertyName}"
            .replaceAll("\\{" + "propertyName" + "\\}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetConfigPropertyValidateBeforeCall(String propertyName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling resetConfigProperty(Async)");
        }
        

        okhttp3.Call localVarCall = resetConfigPropertyCall(propertyName, _callback);
        return localVarCall;

    }

    /**
     * Reset a configuration property
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void resetConfigProperty(String propertyName) throws ApiException {
        resetConfigPropertyWithHttpInfo(propertyName);
    }

    /**
     * Reset a configuration property
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resetConfigPropertyWithHttpInfo(String propertyName) throws ApiException {
        okhttp3.Call localVarCall = resetConfigPropertyValidateBeforeCall(propertyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset a configuration property (asynchronously)
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetConfigPropertyAsync(String propertyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetConfigPropertyValidateBeforeCall(propertyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setLogConfiguration
     * @param logger The name of a single logger. (required)
     * @param logConfiguration The new logger configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new configuration for the given logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLogConfigurationCall(String logger, LogConfiguration logConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logConfiguration;

        // create path and map variables
        String localVarPath = "/admin/loggers/{logger}"
            .replaceAll("\\{" + "logger" + "\\}", localVarApiClient.escapeString(logger.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLogConfigurationValidateBeforeCall(String logger, LogConfiguration logConfiguration, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'logger' is set
        if (logger == null) {
            throw new ApiException("Missing the required parameter 'logger' when calling setLogConfiguration(Async)");
        }
        
        // verify the required parameter 'logConfiguration' is set
        if (logConfiguration == null) {
            throw new ApiException("Missing the required parameter 'logConfiguration' when calling setLogConfiguration(Async)");
        }
        

        okhttp3.Call localVarCall = setLogConfigurationCall(logger, logConfiguration, _callback);
        return localVarCall;

    }

    /**
     * Set a logger&#39;s configuration
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @param logger The name of a single logger. (required)
     * @param logConfiguration The new logger configuration. (required)
     * @return NamedLogConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new configuration for the given logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public NamedLogConfiguration setLogConfiguration(String logger, LogConfiguration logConfiguration) throws ApiException {
        ApiResponse<NamedLogConfiguration> localVarResp = setLogConfigurationWithHttpInfo(logger, logConfiguration);
        return localVarResp.getData();
    }

    /**
     * Set a logger&#39;s configuration
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @param logger The name of a single logger. (required)
     * @param logConfiguration The new logger configuration. (required)
     * @return ApiResponse&lt;NamedLogConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new configuration for the given logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamedLogConfiguration> setLogConfigurationWithHttpInfo(String logger, LogConfiguration logConfiguration) throws ApiException {
        okhttp3.Call localVarCall = setLogConfigurationValidateBeforeCall(logger, logConfiguration, null);
        Type localVarReturnType = new TypeToken<NamedLogConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a logger&#39;s configuration (asynchronously)
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @param logger The name of a single logger. (required)
     * @param logConfiguration The new logger configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new configuration for the given logger. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLogConfigurationAsync(String logger, LogConfiguration logConfiguration, final ApiCallback<NamedLogConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = setLogConfigurationValidateBeforeCall(logger, logConfiguration, _callback);
        Type localVarReturnType = new TypeToken<NamedLogConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfigProperty
     * @param propertyName The name of a configuration property. (required)
     * @param updateConfigurationProperty  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigPropertyCall(String propertyName, UpdateConfigurationProperty updateConfigurationProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConfigurationProperty;

        // create path and map variables
        String localVarPath = "/admin/config/properties/{propertyName}"
            .replaceAll("\\{" + "propertyName" + "\\}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigPropertyValidateBeforeCall(String propertyName, UpdateConfigurationProperty updateConfigurationProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling updateConfigProperty(Async)");
        }
        
        // verify the required parameter 'updateConfigurationProperty' is set
        if (updateConfigurationProperty == null) {
            throw new ApiException("Missing the required parameter 'updateConfigurationProperty' when calling updateConfigProperty(Async)");
        }
        

        okhttp3.Call localVarCall = updateConfigPropertyCall(propertyName, updateConfigurationProperty, _callback);
        return localVarCall;

    }

    /**
     * Update a configuration property
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @param updateConfigurationProperty  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateConfigProperty(String propertyName, UpdateConfigurationProperty updateConfigurationProperty) throws ApiException {
        updateConfigPropertyWithHttpInfo(propertyName, updateConfigurationProperty);
    }

    /**
     * Update a configuration property
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @param updateConfigurationProperty  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateConfigPropertyWithHttpInfo(String propertyName, UpdateConfigurationProperty updateConfigurationProperty) throws ApiException {
        okhttp3.Call localVarCall = updateConfigPropertyValidateBeforeCall(propertyName, updateConfigurationProperty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a configuration property (asynchronously)
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param propertyName The name of a configuration property. (required)
     * @param updateConfigurationProperty  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The configuration property was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigPropertyAsync(String propertyName, UpdateConfigurationProperty updateConfigurationProperty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigPropertyValidateBeforeCall(propertyName, updateConfigurationProperty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalRuleConfig
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalRuleConfigCall(RuleType rule, Rule rule2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule2;

        // create path and map variables
        String localVarPath = "/admin/rules/{rule}"
            .replaceAll("\\{" + "rule" + "\\}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalRuleConfigValidateBeforeCall(RuleType rule, Rule rule2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling updateGlobalRuleConfig(Async)");
        }
        
        // verify the required parameter 'rule2' is set
        if (rule2 == null) {
            throw new ApiException("Missing the required parameter 'rule2' when calling updateGlobalRuleConfig(Async)");
        }
        

        okhttp3.Call localVarCall = updateGlobalRuleConfigCall(rule, rule2, _callback);
        return localVarCall;

    }

    /**
     * Update global rule configuration
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public Rule updateGlobalRuleConfig(RuleType rule, Rule rule2) throws ApiException {
        ApiResponse<Rule> localVarResp = updateGlobalRuleConfigWithHttpInfo(rule, rule2);
        return localVarResp.getData();
    }

    /**
     * Update global rule configuration
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> updateGlobalRuleConfigWithHttpInfo(RuleType rule, Rule rule2) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalRuleConfigValidateBeforeCall(rule, rule2, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update global rule configuration (asynchronously)
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The global rule&#39;s configuration was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalRuleConfigAsync(RuleType rule, Rule rule2, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalRuleConfigValidateBeforeCall(rule, rule2, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRoleMapping
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param updateRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when the update is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleMappingCall(String principalId, UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRole;

        // create path and map variables
        String localVarPath = "/admin/roleMappings/{principalId}"
            .replaceAll("\\{" + "principalId" + "\\}", localVarApiClient.escapeString(principalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleMappingValidateBeforeCall(String principalId, UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'principalId' is set
        if (principalId == null) {
            throw new ApiException("Missing the required parameter 'principalId' when calling updateRoleMapping(Async)");
        }
        
        // verify the required parameter 'updateRole' is set
        if (updateRole == null) {
            throw new ApiException("Missing the required parameter 'updateRole' when calling updateRoleMapping(Async)");
        }
        

        okhttp3.Call localVarCall = updateRoleMappingCall(principalId, updateRole, _callback);
        return localVarCall;

    }

    /**
     * Update a role mapping
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param updateRole  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when the update is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateRoleMapping(String principalId, UpdateRole updateRole) throws ApiException {
        updateRoleMappingWithHttpInfo(principalId, updateRole);
    }

    /**
     * Update a role mapping
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param updateRole  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when the update is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRoleMappingWithHttpInfo(String principalId, UpdateRole updateRole) throws ApiException {
        okhttp3.Call localVarCall = updateRoleMappingValidateBeforeCall(principalId, updateRole, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a role mapping (asynchronously)
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param principalId Unique id of a principal (typically either a user or service account). (required)
     * @param updateRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when the update is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleMappingAsync(String principalId, UpdateRole updateRole, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleMappingValidateBeforeCall(principalId, updateRole, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
